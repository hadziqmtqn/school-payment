<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Attributes\Scope;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

class SchoolYear extends Model
{
    protected $fillable = [
        'slug',
        'first_year',
        'last_year',
        'is_active',
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string',
            'first_year' => 'integer',
            'last_year' => 'integer',
            'is_active' => 'boolean',
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (SchoolYear $schoolYear) {
            $schoolYear->slug = Str::uuid()->toString();
        });

        static::created(function (SchoolYear $schoolYear) {
            if ($schoolYear->is_active) {
                self::where('id', '!=', $schoolYear->id)
                    ->update(['is_active' => false]);
            }
        });

        static::updated(function (SchoolYear $schoolYear) {
            if ($schoolYear->is_active) {
                self::where('id', '!=', $schoolYear->id)
                    ->update(['is_active' => false]);
            }
        });
    }

    protected function year(): Attribute
    {
        return Attribute::make(fn() => $this->first_year . '/' . $this->last_year);
    }

    // TODO Scope
    #[Scope]
    protected function active(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }

    #[Scope]
    protected function nextYear(Builder $query): Builder
    {
        $now = Carbon::now();
        $currentYear = $now->year + 1;
        $nextYear = $now->year + 2;

        return $query->where([
            'first_year' => $currentYear,
            'last_year' => $nextYear
        ]);
    }
}
